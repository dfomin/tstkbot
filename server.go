package main

import (
    "fmt"
    "net/http"
    //"net/http/httputil"
    "net/url"
    "encoding/json"
    "strconv"
    "strings"
    "time"
    "math/rand"
)

const (
    pigFileId = "BQADAgAD6AAD9HsZAAF6rDKYKVsEPwI"
    dogeFileId = "BQADAgAD3gAD9HsZAAFphGBFqImfGAI"
)

type Chat struct {
    Id int `json:"id"`
}

type Message struct {
    Chat Chat `json:"chat"`
    Text string `json:"text"`
}

type Object struct {
    Message Message `json:"message"`
}

var dogeSubscription = false

func handler(w http.ResponseWriter, r *http.Request) {
    //data, _ := httputil.DumpRequest(r, true)
    //fmt.Printf("%s\n\n", data)
    var object Object
    err := json.NewDecoder(r.Body).Decode(&object)
    if err != nil {
        fmt.Println(err)
    }

    index := strings.Index(object.Message.Text, "/punto")
    if index != -1 {
        sendSticker(object.Message.Chat.Id, pigFileId)
        return
    }

    index = strings.Index(object.Message.Text, "/judge")
    if index != -1 {
        names := strings.Split(object.Message.Text, " ")
        if len(names) > 1 {
            judge(object.Message.Chat.Id, names[1:])
        } else {
            sendMessage(object.Message.Chat.Id, "–±–µ—Å–∏—à—å")
        }
        return
    }

    index = strings.Index(object.Message.Text, "/doge")
    if index != -1 {
        if !dogeSubscription {
            dogeSubscription = true
            go dogeSender(object.Message.Chat.Id)
        }
        return
    }

    sendMessage(object.Message.Chat.Id, selectAnswer())
}

func judge(id int, names []string) {
    phrases := []string{
        "–Ω–æ–µ—Ç",
        "–ø–æ –¥–µ–ª—É",
        "–Ω–µ –ø–æ –¥–µ–ª—É",
        "—Ä–∞–∑–≤–µ—Ä–Ω—É–ª —à–∞—Ç–µ—Ä",
        "–∫–ª–æ—É–Ω",
        "–±–µ–∑ –Ω—ã—Ç—å—è",
        "—Å–µ–ª –≤ –ª—É–∂—É",
        "–∫—Ä–æ–º—Å–∞–µ—Ç",
        "—É–Ω–∏—á—Ç–æ–∂–∏–ª –Ω–∞ –º–æ–ª–µ–∫—É–ª—ã",
        "–ø–µ—Ä–µ–±–æ—Ä",
        "—á—Ç–æ-—Ç–æ –∞–≥–∞",
        "–Ω–∏ –≤ –∫–∞–∫–∏–µ –≤–æ—Ä–æ—Ç–∞",
        "—Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–∏–ª—Å—è",
        "–Ω–µ—Å–µ—Ç —á—É—à—å",
        "–∂–æ–ø–∫–∞ –≤ —Ç–µ–ø–ª–µ",
        "–±–µ—Å–∏—Ç",
        "–±–∞–π–∫–∏ —Ç—Ä–∞–≤–∏—Ç",
        "–ø–æ–¥–≥–æ—Ä–µ–ª",
        "–±–æ–º–±–∞–Ω—É–ª",
        "–æ—Ç—Å–∫–æ–∫",
        "—É—Å—Ç—Ä–æ–∏–ª —Å—Ä–∞—á",
        "–∫—É–¥–∞ –ø–æ–ª–µ–∑?",
    }
    var result string
    for _, name := range names {
        phrase := phrases[rand.Intn(len(phrases))]
        result += name + " " + phrase + ", "
    }

    sendMessage(id, result[:len(result)-2])
}

func dogeSender(id int) {
    delay := rand.Intn(60 * 4) + 60 * 8
    time.Sleep(time.Duration(delay) * time.Minute)
    sendSticker(id, dogeFileId)
    go dogeSender(id)
}

func sendMessage(id int, text string) {
    apiUrl := `https://api.telegram.org/bot120816766:AAHuy66RPZLVt3JwBWPwGh2Ndxt_KwAXYlE/sendMessage`
    data := url.Values{}
    data.Add("chat_id", strconv.Itoa(id))
    data.Add("text", text)

    resp, err := http.Get(apiUrl + "?" + data.Encode())
    if err != nil {
        fmt.Println(err)
    }
    defer resp.Body.Close()
}

func selectAnswer() string {
    answers := []string{
        "–∏ —á–µ?",
        "–Ω—É –∏?",
        "—Ç–µ–±—è –Ω–µ —Å–ø—Ä–æ—Å–∏–ª",
        "–æ—Ç—Ä",
        "–æ —Ç–æ–º –∏ —Ä–µ—á—å",
        "–Ω–æ–µ—à—å",
        "–±–∞–π–∫–∏",
        "—Ö–º",
        "—Ö–µ—Ä –∑–Ω–∞–µ—Ç",
        "üò¨üò¨üò¨",
        "–æ—Ñ–∫",
    }

    return answers[rand.Intn(len(answers))]
}

func sendSticker(id int, fileId string) {
    apiUrl := `https://api.telegram.org/bot120816766:AAHuy66RPZLVt3JwBWPwGh2Ndxt_KwAXYlE/sendSticker`
    data := url.Values{}
    data.Add("chat_id", strconv.Itoa(id))
    data.Add("sticker", fileId)

    //fmt.Println(data.Encode())
    resp, err := http.Get(apiUrl + "?" + data.Encode())
    if err != nil {
        fmt.Println(err)
    }
    defer resp.Body.Close()
}

func main() {
    http.HandleFunc("/tstkbot", handler)
    err := http.ListenAndServeTLS(":8443", "fullchain.pem", "privkey.pem", nil)
    if err != nil {
        fmt.Println("ListenAndServe: ", err)
    }
}

